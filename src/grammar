/--------------------\
	The edited
	grammar for SL
\--------------------/
SPL 	= Decl+
Decl 	= VarDecl | FunDecl
VarDecl	= Type id '=' Exp ';'
FunDecl	= RetType id '(' [ FArgs ] ')' '{' VarDecl* Stmt+ '}' --note that in the official grammar, all local variables must be declared beforehand
RetType	= 'Void' | Type
Type	= 'Int' | 'Bool' | '(' Type ',' Type ')' | '[' Type ']' | id
FArgs	= Type id [ ',' FArgs ] -- removed left recursion
Stmt	= '{' Stmt* '}' 
		| 'if' '(' Exp ')' Stmt [ 'else' Stmt ] 
		| 'while' '(' Exp ')' Stmt
		| id Field '=' Exp ';'
		| FunCall ';'
		| 'return' [ Exp ] ';'
Exp		= Exp2 Op2 Exp | Factor | '(' Exp ',' Exp ')' | Exp2 | '(' Exp ')' --removed left recursion in exp -> exp op2 exp
Factor	= Expr2 '*' Expr2 -- is not in Exp2, because then we'd have left recursion Exp2 -> Factor -> Exp2 * Exp2
Exp2	= id Field
		| Op1 Exp2 
		| int
		| 'False' | 'True'
		| FunCall
		| '[]'
Field	= [ ( '.hd' | '.tl' | '.fst' | '.snd' ) Field ] --removed left recursion
FunCall	= id '(' [ ActArgs ] ')'
ActArgs	= Exp [ ',' ActArgs ]
Op2		= MathOp | RelOp | BoolOp | ListOp
RelOp	= '==' | '<' | '>' | '<=' | '>=' | !=
BoolOp	= '&&' | '||'
ListOp	= ':'
MathOp  = '+' | '-' | '/' | '%' 					--removed the '*', which is now in factor
Op1		= '!' | '-'
int		= [ '-' ] digit+
id		= alpha ( '_' | alphanum )*


--------draft version expressions ----------
Expression = id FieldOrArgs | Exp-1
FieldOrArgs = '(' -funcall met args ')' | Field
Exp-1	= Exp0 BExp
BExp	= '&&' Exp-1 | '||' Exp-1 | e
Exp0	= Exp0.5 Rexp
Rexp	= '<' Exp0 | '<=' Exp0 | '==' Exp0 | '>' Exp0 | '>=' Exp0 | '!=' Exp0 | e
Exp0.5	= Exp1 Unexp
Unexp	= '!' Exp0.5 | ':' Exp0.5 --klopt dit wel?
Exp1	= Term Pexp
Pexp	= '+' Exp1 | '-' Exp1 | e
Term	= Factor Term2
Fexp	= '*' Term | '/' Term | '%' Term | e
Factor	= '(' Exp0 TupPar | int | id | 'True' | 'False' | []
TupPar	= ',' Exp0 ')' | ')'

---------voorbeeld expressions ------------
<Exp> ::= <Term> <Exp'>
<Exp'> ::= + <Exp> | - <Exp> | ε
<Term> ::= <Factor> <Term'>
<Term'> ::= * <Term> | / <Term> | ε
<Factor> ::= x | y | ... | ( <Exp> ) | - <Factor>

/--------------------\
	The original
	grammar for SL
\--------------------/

SPL 	= Decl+
Decl 	= VarDecl | FunDecl
VarDecl	= Type id '=' Exp ';'
FunDecl	= RetType id '(' [ FArgs ] ')' '{' VarDecl* Stmt+ '}'
RetType	= 'Void' | Type
Type	= 'Int' | 'Bool' | '(' Type ',' Type ')' | '[' Type ']' | id
FArgs	= [ FArgs ',' ] Type id												

Stmt	= '{' Stmt* '}' 
		| 'if' '(' Exp ')' Stmt [ 'else' Stmt ] 
		| 'while' '(' Exp ')' Stmt
		| id Field '=' Exp ';'
		| FunCall ';'
		| 'return' [ Exp ] ';'
Exp		= id Field
		| Exp Op2 Exp
		| Op1 Exp 
		| int
		| 'False' | 'True'
		| '(' Exp ')'
		| FunCall
		| '[]'
		| '(' Exp ',' Exp ')'
Field	= [ Field ( '.' 'hd' | '.' 'tl' | '.' 'fst' | '.' 'snd' ) ] 
FunCall	= id '(' [ ActArgs ] ')'
ActArgs	= Exp [ ',' ActArgs ]
Op2		= '+' | '-' | '*' | '/' | '%'
		| '==' | '<' | '>' | '<=' | '>=' | !=
		| '&&' | '||'
		| ':'
Op1		= '!' | '-'
int		= [ '-' ] digit+
id		= alpha ( '_' | alphanum )*

