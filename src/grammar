/--------------------\
	The edited
	grammar for SL
\--------------------/
SPL 	= Decl+
Decl 	= VarDecl | FunDecl
VarDecl	= Type id '=' Exp ';'
FunDecl	= RetType id '(' [ FArgs ] ')' '{' VarDecl* Stmt+ '}' --note that in the official grammar, all local variables must be declared beforehand
RetType	= 'Void' | Type
Type	= 'Int' | 'Bool' | '(' Type ',' Type ')' | '[' Type ']' | id
FArgs	= Type id [ ',' FArgs ] -- removed left recursion
Stmt	= '{' Stmt* '}' 
		| 'if' '(' Exp ')' Stmt [ 'else' Stmt ] 
		| 'while' '(' Exp ')' Stmt
		| id Field '=' Exp ';'
		| FunCall ';'
		| 'return' [ Exp ] ';'
Exp		= id FieldOrArgs | Exp1
FieldOrArgs = '(' FunCall ')' | Field
Field	= ( '.hd' | '.tl' | '.fst' | '.snd' )*
FunCall	= id '(' [ ActArgs ] ')'
ActArgs	= Exp (',' Exp)*
Exp1	= Exp2 BExp
BExp	= '&&' Exp1 | '||' Exp1 | e	-- boolean expressions
Exp2	= Exp3 RExp
RExp	= '<' Exp2 | '<=' Exp2 | '==' Exp2 | '>' Exp2 | '>=' Exp2 | '!=' Exp2 | e --relation expressions
Exp3	= Exp4 Unexp
Unexp	= '!' Exp3 | ':' Exp3 --unary operators
Exp4	= Exp5 Pexp
Pexp	= '+' Exp4 | '-' Exp4 | e --arithmetic ops
Exp5	= Exp6 Fexp
Fexp	= '*' Exp5 | '/' Exp5 | '%' Exp5 | e --more arithmetic ops
Exp6	= '(' Exp TupPar | int | id | 'True' | 'False' | []
TupPar	= ',' Exp ')' | ')'
int		= [ '-' ] digit+
id		= alpha ( '_' | alphanum )*


--------draft version expressions ----------
Exp		= id FieldOrArgs | Exp1
FieldArgs = '(' FunCall ')' | Field
Field	= ( '.hd' | '.tl' | '.fst' | '.snd' )*
FunCall	= id '(' [ ActArgs ] ')'
ActArgs	= Exp (',' Exp)*
Exp1	= Exp2 BExp
BExp	= '&&' Exp1 | '||' Exp1 | e	-- boolean expressions
Exp2	= Exp3 RExp
RExp	= '<' Exp2 | '<=' Exp2 | '==' Exp2 | '>' Exp2 | '>=' Exp2 | '!=' Exp2 | e --relation expressions
Exp3	= Exp4 Unexp
Unexp	= '!' Exp3 | ':' Exp3 --unary operators
Exp4	= Exp5 Pexp
Pexp	= '+' Exp4 | '-' Exp4 | e --arithmetic ops
Exp5	= Exp6 Fexp
Fexp	= '*' Exp5 | '/' Exp5 | '%' Exp5 | e --more arithmetic ops
Exp6	= '(' Exp TupPar | int | id | 'True' | 'False' | []
TupPar	= ',' Exp ')' | ')'

---------voorbeeld expressions ------------
<Exp> ::= <Term> <Exp'>
<Exp'> ::= + <Exp> | - <Exp> | ε
<Term> ::= <Factor> <Term'>
<Term'> ::= * <Term> | / <Term> | ε
<Factor> ::= x | y | ... | ( <Exp> ) | - <Factor>

/--------------------\
	The original
	grammar for SL
\--------------------/

SPL 	= Decl+
Decl 	= VarDecl | FunDecl
VarDecl	= Type id '=' Exp ';'
FunDecl	= RetType id '(' [ FArgs ] ')' '{' VarDecl* Stmt+ '}'
RetType	= 'Void' | Type
Type	= 'Int' | 'Bool' | '(' Type ',' Type ')' | '[' Type ']' | id
FArgs	= [ FArgs ',' ] Type id												

Stmt	= '{' Stmt* '}' 
		| 'if' '(' Exp ')' Stmt [ 'else' Stmt ] 
		| 'while' '(' Exp ')' Stmt
		| id Field '=' Exp ';'
		| FunCall ';'
		| 'return' [ Exp ] ';'
Exp		= id Field
		| Exp Op2 Exp
		| Op1 Exp 
		| int
		| 'False' | 'True'
		| '(' Exp ')'
		| FunCall
		| '[]'
		| '(' Exp ',' Exp ')'
Field	= [ Field ( '.' 'hd' | '.' 'tl' | '.' 'fst' | '.' 'snd' ) ] 
FunCall	= id '(' [ ActArgs ] ')'
ActArgs	= Exp [ ',' ActArgs ]
Op2		= '+' | '-' | '*' | '/' | '%'
		| '==' | '<' | '>' | '<=' | '>=' | !=
		| '&&' | '||'
		| ':'
Op1		= '!' | '-'
int		= [ '-' ] digit+
id		= alpha ( '_' | alphanum )*

