/--------------------\
	The edited
	grammar for SL
\--------------------/
SPL 	= Decl+
Decl 	= VarDecl | FunDecl
VarDecl	= Type id '=' Exp ';'
FunDecl	= RetType id '(' [ FArgs ] ')' '{' VarDecl* Stmt+ '}'
RetType	= 'Void' | Type
Type	= 'Int' | 'Bool' | '(' Type ',' Type ')' | '[' Type ']' | id
FArgs	= Type id [ ',' FArgs ] -- removed left recursion

Stmt	= '{' Stmt* '}'
		| 'if' '(' Exp ')' Stmt ['else' Stmt]
		| 'while' '(' Exp ')' Stmt
		| id Field '=' Exp ';'
		| Exp
		| 'return' [ Exp ] ';'
		
Exp		= Exp1 | id FieldOrFun

-- Boolean operators
Exp1	= Exp2 | Exp2 Bexp | '!' Exp1
Bexp	= '&&' Exp1 | '||' Exp1

-- Relation operators
Exp2	= Exp3 | Exp3 Rexp
Rexp	= '==' Exp2 | '<' Exp2 | '>' Exp2 | '<=' Exp2 | '>=' Exp2 | '!=' Exp2

-- List operators
Exp3	= Exp4 | Exp4 Lexp
Lexp	= ':' Exp3

-- Summation operators
Exp4	= Exp5 | Exp5 Pexp
Pexp	= '+' Exp4 | '-' Exp4

-- Multiplication operators
Exp5	= Exp6 | Exp6 Fexp
Fexp	= '*' Exp5 | '/' Exp5 | '%' Exp5

-- Negation operator
Exp6	= Exp7 | '-' Exp6

-- Type operators
Exp7	= '(' Exp TupPar | Pconst
TupPar	= ',' Exp ')' | ')'
Pconst	= int | 'True' | 'False' | []

-- Function calls and variable accessing
FieldOrFun =  Field | '(' [ActArgs] ')'		-- Function call
Field	= ( '.hd' | '.tl' | '.fst' | '.snd' )*
ActArgs	= Exp (',' Exp)*

-- Constants
int		= [ '-' ] digit+
id		= alpha ( '_' | alphanum )*
