/--------------------\
	The original
	grammar for SL
\--------------------/

SPL 	= Decl+
Decl 	= VarDecl | FunDecl
VarDecl	= Type id '=' Exp ';'
FunDecl	= RetType id '(' [ FArgs ] ')' '{' VarDecl* Stmt+ '}'
RetType	= 'Void' | Type
Type	= 'Int' | 'Bool' | '(' Type ',' Type ')' | '[' Type ']' | id
FArgs	= [ FArgs ',' ] Type id												

Stmt	= '{' Stmt* '}' 
		| 'if' '(' Exp ')' Stmt [ 'else' Stmt ] 
		| 'while' '(' Exp ')' Stmt
		| id Field '=' Exp ';'
		| FunCall ';'
		| 'return' [ Exp ] ';'
Exp		= id Field
		| Exp Op2 Exp
		| Op1 Exp 
		| int
		| 'False' | 'True'
		| '(' Exp ')'
		| FunCall
		| '[]'
		| '(' Exp ',' Exp ')'
Field	= [ Field ( '.' 'hd' | '.' 'tl' | '.' 'fst' | '.' 'snd' ) ] 
FunCall	= id '(' [ ActArgs ] ')'
ActArgs	= Exp [ ',' ActArgs ]
Op2		= '+' | '-' | '*' | '/' | '%'
		| '==' | '<' | '>' | '<=' | '>=' | !=
		| '&&' | '||'
		| ':'
Op1		= '!' | '-'
int		= [ '-' ] digit+
id		= alpha ( '_' | alphanum )*
